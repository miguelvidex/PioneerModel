<?xml version="1.0"?>
<launch>

    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />
    <arg name="robot" default="pioneer3dx_with_asus_camera.xacro" />

    <!-- set the desired robot world -->
        <arg name="world_name" default="testbed.world" />
        <arg name="world_path" default="$(find p3dx_gazebo)/worlds/" />

    <!-- We resume the logic in empty_world.launch, changing only the name of
        the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_path)$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(find p3dx_description)/urdf/$(arg robot)'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn
        a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        respawn="false" output="screen" args="-urdf -model p3dx -param robot_description -x 2 -y 1 -z 0.01 -R 0 -P 0 -Y 3.14159265359" />

    <!-- robot state publisher, listen to joint states and publish tf accordingly -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen" />

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <!-- ros_control p3rd launch file -->
    <!--<include file="$(find p3dx_control)/launch/control.launch" /> -->
    
    <!-- Set up env variable so models are found -->
    <!--env name="GAZEBO_MODEL_PATH" value="$(find p3dx_gazebo)/models"/-->
    <!-- add the aruco_ros detector-->
    <include file="$(find aruco_ros)/launch/mymarker_publisher.launch"/>
    <include file="$(find p3dx_description)/launch/rviz.launch"/>
    <!--node pkg="rostopic" type="rostopic" name="rostopic_markers_map" args="pub markers_map geometry_msgs/PoseArray -f $(find kalman_filter)/ros/config/config_kalman_filter.yaml" output="screen"/-->
</launch>
